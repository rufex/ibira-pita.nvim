local M = {}

local palette = require("ibira-pita.color-palette")

local function hl(group, color)
  vim.api.nvim_set_hl(0, group, color)
end

local function apply_colors()
  hl("Normal", { fg = palette.grey_light, bg = palette.black })
  hl("Comment", { fg = palette.grey, italic = true })
  hl("Constant", { fg = palette.yellow })
  hl("String", { fg = palette.brown_orange })
  hl("Character", { fg = palette.purple_light })
  hl("Number", { fg = palette.yellow })
  hl("Boolean", { fg = palette.yellow })
  hl("Float", { fg = palette.purple })
  hl("Identifier", { fg = palette.purple })
  hl("Function", { fg = palette.purple_light })
  hl("Statement", { fg = palette.purple })
  hl("Conditional", { fg = palette.purple })
  hl("Repeat", { fg = palette.purple })
  hl("Label", { fg = palette.purple })
  hl("Operator", { fg = palette.brown_orange_dark })
  hl("Keyword", { fg = palette.purple_darker })
  hl("Exception", { fg = palette.purple })
  hl("PreProc", { fg = palette.brown_orange_dark })
  hl("Include", { fg = palette.brown_orange_dark })
  hl("Define", { fg = palette.brown_orange_dark })
  hl("Macro", { fg = palette.brown_orange_dark })
  hl("PreCondit", { fg = palette.brown_orange_dark })
  hl("Type", { fg = palette.purple_light })
  hl("StorageClass", { fg = palette.purple_light })
  hl("Structure", { fg = palette.grey_light })
  hl("Substitute", { fg = palette.black, bg = palette.brown_orange_dark })
  hl("Typedef", { fg = palette.purple_light })
  hl("Special", { fg = palette.brown_orange_dark })
  hl("SpecialChar", { fg = palette.brown_orange_dark })
  hl("Tag", { fg = palette.brown_orange_dark })
  hl("Delimiter", { fg = palette.grey_dark })
  hl("SpecialComment", { fg = palette.grey_light })
  hl("Debug", { fg = palette.red })
  hl("Underlined", { underline = true })
  hl("Ignore", { fg = palette.grey })
  hl("Error", { fg = palette.red })
  hl("Todo", { fg = palette.yellow, bg = palette.brown_orange_dark, bold = true })
  hl("CursorLine", { bg = palette.black_light })
  hl("CursorLineNr", { fg = palette.brown_orange_dark, bold = true })
  hl("LineNr", { fg = palette.grey })
  hl("SignColumn", { fg = palette.grey_light, bg = palette.black })
  hl("StatusLine", { fg = palette.black, bg = palette.brown_orange_dark })
  hl("StatusLineNC", { fg = palette.grey_light, bg = palette.black })
  hl("Visual", { bg = palette.brown_orange_dark })
  hl("NormalFloat", { fg = palette.grey_light, bg = palette.black })
  hl("Pmenu", { fg = palette.grey_light, bg = palette.black })
  hl("PmenuSel", { fg = palette.black, bg = palette.brown_orange_dark })
  hl("PmenuSbar", { bg = palette.grey_dark })
  hl("PmenuThumb", { bg = palette.grey })
  hl("TabLine", { fg = palette.brown_orange_dark, bg = palette.black })
  hl("TabLineFill", { fg = palette.black, bg = palette.brown_orange_dark })
  hl("TabLineSel", { fg = palette.purple_light, bg = palette.brown_orange_dark })
  hl("DiffAdd", { fg = palette.purple_light, bg = palette.black })
  hl("DiffChange", { fg = palette.brown_orange_dark, bg = palette.black })
  hl("DiffDelete", { fg = palette.red, bg = palette.black })
  hl("DiffText", { fg = palette.brown_orange_dark, bg = palette.black })
  hl("DiagnosticError", { fg = palette.red })
  hl("DiagnosticWarn", { fg = palette.yellow })
  hl("DiagnosticInfo", { fg = palette.grey_dark })
  hl("DiagnosticHint", { fg = palette.grey })
  -- Treesitter
  hl("TSAnnotation", { fg = palette.grey_light })
  hl("TSAttribute", { fg = palette.purple_light })
  hl("TSBoolean", { fg = palette.yellow })
  hl("TSCharacter", { fg = palette.purple_light })
  hl("TSComment", { fg = palette.grey, italic = true })
  hl("TSConditional", { fg = palette.purple })
  hl("TSConstant", { fg = palette.yellow })
  hl("TSConstBuiltin", { fg = palette.yellow })
  hl("TSConstMacro", { fg = palette.purple_light })
  hl("TSError", { fg = palette.red })
  hl("TSException", { fg = palette.purple })
  hl("TSField", { fg = palette.purple })
  hl("TSFloat", { fg = palette.purple })
  hl("TSFunction", { fg = palette.purple_light })
  hl("TSFuncBuiltin", { fg = palette.purple })
  hl("TSFuncMacro", { fg = palette.purple })
  hl("TSKeyword", { fg = palette.purple_darker })
  hl("TSKeywordFunction", { fg = palette.purple_darker })
  hl("TSLabel", { fg = palette.purple })
  hl("TSMethod", { fg = palette.purple_light })
  hl("TSNamespace", { fg = palette.grey })
  hl("TSNumber", { fg = palette.yellow })
  hl("TSOperator", { fg = palette.brown_orange_dark })
  hl("TSParameter", { fg = palette.purple })
  hl("TSProperty", { fg = palette.purple })
  hl("TSPunctDelimiter", { fg = palette.grey_dark })
  hl("TSPunctBracket", { fg = palette.grey_dark })
  hl("TSPunctSpecial", { fg = palette.grey_dark })
  hl("TSString", { fg = palette.brown_orange })
  hl("TSStringRegex", { fg = palette.brown_orange_dark })
  hl("TSStringEscape", { fg = palette.brown_orange_dark })
  hl("TSSymbol", { fg = palette.purple })
  hl("TSType", { fg = palette.purple_light })
  hl("TSTypeBuiltin", { fg = palette.purple_light })
  hl("TSVariable", { fg = palette.purple })
  hl("TSVariableBuiltin", { fg = palette.purple })
  -- Misc
  hl("Title", { fg = palette.brown_orange_dark })
  hl("@variable", { fg = palette.purple })
  hl("Directory", { fg = palette.brown_orange_dark })
  hl("SignAdd", { fg = palette.purple_light })
  hl("SignChange", { fg = palette.brown_orange_dark })
  hl("SignDelete", { fg = palette.red })
  hl("Search", { fg = palette.black, bg = palette.brown_orange_dark })
  hl("IncSearch", { fg = palette.black, bg = palette.brown_orange_dark })
  hl("SpellBad", { undercurl = true, sp = palette.red })
  hl("SpellCap", { undercurl = true, sp = palette.yellow })
  hl("SpellLocal", { undercurl = true, sp = palette.brown_orange_dark })
  hl("SpellRare", { undercurl = true, sp = palette.purple })
  hl("Folded", { fg = palette.grey, bg = palette.black_light })
  hl("FoldColumn", { fg = palette.grey, bg = palette.black })
  hl("ErrorMsg", { fg = palette.red, bold = true })
  hl("WarningMsg", { fg = palette.yellow, bold = true })
  hl("MoreMsg", { fg = palette.yellow })
  hl("Question", { fg = palette.purple_light })
  -- GitSigns
  hl("GitSignsAdd", { fg = palette.purple })
  hl("GitSignsChange", { fg = palette.purple })
  hl("GitSignsDelete", { fg = palette.purple })
  hl("GitSignsChangeDelete", { fg = palette.purple })
  -- Telescope
  hl("TelescopeNormal", { fg = palette.grey_light, bg = palette.black })
  hl("TelescopeBorder", { fg = palette.grey_darker, bg = palette.black })
  hl("TelescopeSelection", { fg = palette.brown_orange_dark, bg = palette.grey_darker })
  -- TreesitterContext
  hl("TreesitterContext", { bg = palette.black_light })
  -- LSP
  hl("LspReferenceText", { bg = palette.grey_darker })
  hl("LspReferenceRead", { bg = palette.grey_darker })
  hl("LspReferenceWrite", { bg = palette.grey_darker })
  hl("LspSignatureActiveParameter", { fg = palette.brown_orange_dark })
  -- Ruby
  hl("@variable.member.ruby", { fg = palette.purple })
  hl("@string.ruby", { fg = palette.brown_orange })
  hl("@constant.ruby", { fg = palette.purple })
  hl("@type.ruby", { fg = palette.pale_brown })
  -- Vue.js
  hl("vueComponentName", { fg = palette.purple_light })
  hl("vueTag", { fg = palette.brown_orange_dark })
  hl("vueDirective", { fg = palette.purple })
  hl("vueAttr", { fg = palette.purple })
  hl("vueMethod", { fg = palette.purple_light })
  hl("vueComputed", { fg = palette.purple_light })
  hl("vueWatch", { fg = palette.purple_light })
  hl("vueEmit", { fg = palette.brown_orange_dark })
  hl("vueProps", { fg = palette.purple })
  hl("vueData", { fg = palette.brown_orange_dark })
  hl("vueFilter", { fg = palette.purple })
  hl("vueInterpolation", { fg = palette.brown_orange_dark })
  hl("vueTemplate", { fg = palette.grey_light })
  hl("vueScript", { fg = palette.grey_light })
  hl("vueStyle", { fg = palette.grey_light })
  hl("vueTemplateLiteral", { fg = palette.purple })
  hl("vueSetupKeyword", { fg = palette.purple_darker })
  hl("vueRef", { fg = palette.brown_orange_dark })
  hl("vueReactive", { fg = palette.brown_orange_dark })
  hl("vueComposable", { fg = palette.purple_light })
  hl("vueLifecycleHook", { fg = palette.purple })
  hl("vueRouter", { fg = palette.purple_light })
  hl("vueStore", { fg = palette.purple_light })
  hl("vueTypeScript", { fg = palette.purple })
  hl("vueInterface", { fg = palette.purple_light })
  hl("vueType", { fg = palette.purple_light })
  hl("@vue.component", { fg = palette.purple_light })
  hl("@vue.directive", { fg = palette.purple })
  hl("@vue.expression", { fg = palette.brown_orange_dark })
  hl("@vue.interpolation", { fg = palette.brown_orange_dark })
  hl("@vue.script_setup", { fg = palette.purple })
  hl("@vue.template_tag", { fg = palette.grey_light })
  -- Mini.Tabline
  hl("MiniTablineCurrent", { fg = palette.brown_orange_dark, bg = palette.black_light })
  hl("MiniTablineModifiedCurrent", { fg = palette.grey_dark, bg = palette.black_light })
  hl("MiniTablineVisible", { fg = palette.grey_dark, bg = palette.black })
  hl("MiniTablineModifiedVisible", { fg = palette.grey_dark, bg = palette.black })
  hl("MiniTablineHidden", { fg = palette.grey_dark, bg = palette.black })
  hl("MiniTablineModifiedHidden", { fg = palette.grey_dark, bg = palette.black })
  -- Mini.Diff
  hl("MiniDiffSignAdd", { fg = palette.green, bg = palette.black })
  hl("MiniDiffSignChange", { fg = palette.yellow, bg = palette.black })
  hl("MiniDiffSignDelete", { fg = palette.red, bg = palette.black })
  hl("MiniDiffOverAdd", { fg = palette.green, bg = palette.black, bold = true })
  hl("MiniDiffOverChange", { fg = palette.red, bg = palette.black_light, bold = true })
  hl("MiniDiffOverContext", { fg = palette.red, bg = palette.black, bold = true })
  hl("MiniDiffOverChangeBuf", { fg = palette.green, bg = palette.black_light, bold = true })
  hl("MiniDiffOverContextBuf", { fg = palette.green, bg = palette.black, bold = true })
  hl("MiniDiffOverDelete", { fg = palette.red, bg = palette.black, bold = true })
  -- Neogit Diff
  hl("NeogitDiffAdd", { fg = palette.green, bg = palette.black_light })
  hl("NeogitDiffChange", { fg = palette.yellow, bg = palette.black_light })
  hl("NeogitDiffDelete", { fg = palette.red, bg = palette.black_light })
  hl("NeogitDiffAddHighlight", { fg = palette.green, bg = palette.black_light, bold = true })
  hl("NeogitDiffChangeHighlight", { fg = palette.yellow, bg = palette.black_light, bold = true })
  hl("NeogitDiffDeleteHighlight", { fg = palette.red, bg = palette.black_light, bold = true })
  hl("NeogitDiffContextHighlight", { fg = palette.grey_light, bg = palette.black, bold = true })
end

local function set_terminal_colors()
  vim.g.terminal_color_0 = palette.black
  vim.g.terminal_color_1 = palette.red
  vim.g.terminal_color_2 = palette.green
  vim.g.terminal_color_3 = palette.yellow
  vim.g.terminal_color_4 = palette.purple
  vim.g.terminal_color_5 = palette.purple_light
  vim.g.terminal_color_6 = palette.brown_orange
  vim.g.terminal_color_7 = palette.grey_light
  vim.g.terminal_color_8 = palette.grey_dark
  vim.g.terminal_color_9 = palette.red_light
  vim.g.terminal_color_10 = palette.purple_light
  vim.g.terminal_color_11 = palette.yellow
  vim.g.terminal_color_12 = palette.purple
  vim.g.terminal_color_13 = palette.purple_dark
  vim.g.terminal_color_14 = palette.brown_orange
  vim.g.terminal_color_15 = palette.cream
end

function M.load()
  vim.cmd("highlight clear")
  vim.cmd("syntax reset")
  vim.o.background = "dark"
  apply_colors()
  set_terminal_colors()
end

return M
